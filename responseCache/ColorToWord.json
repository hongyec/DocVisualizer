{"#793b4d": ["bft consensus protocols", "tolerant bft consensus", "abstraction bft consensus", "increased latency consensus", "dissemination aggregation trees", "consensus protocols ii", "fault tolerant bft", "multiple consensus instances", "processed reach consensus", "context consensus protocols"], "#ad751d": ["circumvent impossibility consensus", "byzantine fault model", "assume partial synchrony", "consensus assume partial", "delivers implemented using", "mechanisms message transmission", "public key infrastructure", "worst case network", "assume composed server", "global stabilization time"], "#33a0a6": ["based consensus algorithms", "reliable dissemination guaranteed", "aggregation communicating tree", "consensus communication rounds", "leader based consensus", "reaches consensus communication", "satisfying reliable dissemination", "guarantees reliable dissemination", "new consensus algorithm", "collect byzantine quorum"], "#24df43": ["consensus communication rounds", "satisfying reliable dissemination", "reaches consensus communication", "information quorum replicas", "broadcast data leader", "broadcasts commit quorum", "achieve reliable dissemination", "hotstuf reaches consensus", "reliable dissemination similar", "reliable dissemination fulfillment"], "#ff3746": ["condition achieve consensus", "tree implement broadcastmsg", "nodes send signatures", "achieve consensus fact", "robust leader process", "robust internal nodes", "consensus reached long", "aggregates signatures sends", "nodes including leader", "computed root tree"], "#a5784b": ["aggregation communicating tree", "impatient channels implemented", "communicating tree processes", "worst case network", "perform aggregation communicating", "tree cryptographic primitives", "gst sender receiver", "use ensures receiver", "propagate information tree", "use tree communicate"], "#04907a": ["impatient channels implemented", "worst case network", "gst sender receiver", "validity process delivers", "case network latency", "receiver processes respectively", "value sent algorithm", "tagging corresponding messages", "edge sent termination", "implemented perfect channels"], "#b9e5db": ["guarantees reliable dissemination", "collect byzantine quorum", "aggregate signatures propagated", "reliable dissemination implementing", "reliable dissemination guaranteed", "implementation broadcastmsg tree", "forwarded leader model", "reliable dissemination proof", "robust tree ensures", "scalability kauri mitigates"], "#457c13": ["latency trees allow", "eficient scalable evaluation", "configuration robust leader", "round trip broadcastmsg", "topology eficient scalable", "trees allow distribute", "increased latency trees", "hotstuf tree topology", "distribute load processes", "large introduce reconfiguration"], "#0dda92": ["information pipelined consensus", "parallel consensus instances", "pipelined consensus instances", "information parallel consensus", "round dissemination aggregation", "execution single consensus", "instance consensus piggybacking", "information consensus instances", "rounds instance consensus", "consensus implement pipelining"], "#f800b1": ["information pipelined consensus", "instance consensus piggybacking", "pipelined consensus instances", "round dissemination aggregation", "consensus instances hotstuf", "consensus implement pipelining", "round messages consensus", "consensus instance second", "consensus piggybacking round", "messages consensus instance"], "#4fb0de": ["information consensus instances", "execution single consensus", "carries information consensus", "multiple instances consensus", "consensus execution single", "given consensus instance", "consensus instances rounds", "consensus instance note", "instances consensus execution", "dissemination phase faster"], "#421fb5": ["additional consensus instances", "tree rtt network", "consensus instances challenge", "start additional consensus", "additional consensus instance", "consensus instances started", "network latency processing", "consensus instance started", "aggregate votes receives", "number additional consensus"], "#92f9b9": ["leader based protocol", "guaranteeing robust tree", "scalability throughput properties", "based hotstuf protocol", "communicate faults asynchronous", "robust static graphs", "graphs trees ensure", "trees robust reconfigurations", "use tree communicate", "tree tbounded conformity"], "#87c2f7": ["graphs trees ensure", "conformity recurringly robust", "robust static graphs", "used processes communicate", "eventually robust tree", "static graphs trees", "trees ensure eventually", "small number reconfigurations", "evolving graph bounded", "ensure eventually robust"], "#0d685f": ["guaranteeing robust tree", "following round robin", "tree tbounded conformity", "long proof bins", "exclusively correct nodes", "large contain processes", "value balanced tree", "algorithm achieves bounded", "nodes tree limits", "bin tree built"], "#07914d": ["value balanced tree", "large contain processes", "nodes tree limits", "achieve bounded conformity", "algorithm allows achieve", "balanced tree fanout", "internal nodes tree", "approach bin large", "allows achieve bounded", "tree limits number"], "#abb3c9": ["based hotstuf protocol", "steps robust tree", "scalability throughput properties", "conformity able reconfigure", "faults large recovers", "scenario kauri performs", "algorithm achieve bounded", "non faulty leader", "robust tree kauri", "quickly losing scalability"], "#7d3df9": ["dissemination phase consensus", "hotstuf mechanisms consensus", "nodes aggregate verify", "mechanisms consensus reached", "consensus instance current", "phase consensus instance", "availability overall implementation", "scheme 1available htps", "construct tree sends", "time start dissemination"], "#d2149a": ["consensus instances parallel", "globally distributed blockchain", "consecutive trees consensus", "power latency consensus", "kauri pipeline consensus", "dissemination aggregation parallelism", "resilientdb geobft protocol", "consensus bound rtt", "pipeline consensus instances", "bandwidth rtt clusters"], "#ef3f9e": ["globally distributed blockchain", "approximates balanced tree", "2available htps github", "models globally distributed", "distributed blockchain used", "permissioned blockchains large", "bandwidth national deployment", "global deployment models", "nodes results trees", "grid 5000 testbed"], "#742115": ["bandwidth rtt scenarios", "compute kauri pipelining", "used compute target", "250 plus signatures", "rtt scenarios blocks", "following rationale introduced", "experimentally sending time", "experimented block sizes", "target pipelining stretch", "results presented sections"], "#0ed81d": ["global global tr", "empirically observed blocksize", "stretch kauri throughput", "rtt 25 bandwidth", "results achieved pipelining", "instances transactions instances", "scenario 200 rtt", "sending time smaller", "block sizes sending", "throughput achieved using"], "#1b0150": ["trees bls signatures", "considers computation dissemination", "nodes global scenario", "mechanism outperforms hotstuf", "performance tree based", "standard implementation variant", "global 200 rtt", "400 nodes global", "large numbers participants", "leveraging capacity pipelining"], "#ed6dde": ["throughput evolution rtt", "available computing network", "tree based approaches", "rtt inherent tree", "pipelining allows kauri", "scenario 100 bandwidth", "computing network resources", "observe throughput evolution", "stretch avoid leader", "observed throughput hotstuf"], "#8596d9": ["power latency consensus", "dissemination aggregation parallelism", "consensus bound rtt", "latency consensus bound", "tree confirm set", "time dissemination aggregation", "aggregation parallelism enabled", "communication hops required", "parallelism enabled tree", "bandwidth constrained scenarios"], "#ac513e": ["hotstuf latency surpasses", "using tree spread", "throughput scenarios confirms", "avoid bottleneck leader", "away cpu network", "latency surpasses kauri", "latency throughput scenarios", "higher level pipelining", "global scenario 100", "spread load avoid"], "#f34da2": ["scenarios better latency", "systems share sending", "bandwidth deployed hotsufsecp", "tree height throughput", "bls outperform hotstuf", "kauri throughput doubles", "bandwidth constrained scenarios", "latency variants hotstuf", "observation corroborates experiments", "factor throughput latency"], "#ab648a": ["consensus instances parallel", "kauri pipeline consensus", "resilientdb geobft protocol", "pipeline consensus instances", "bandwidth rtt clusters", "bft worth noting", "independent blockchains opted", "geobft protocol available", "deployed local clusters", "latency hotstuf variants"], "#c7f837": ["consecutive trees consensus", "dissemination regular hotstuf", "process prevent consensus", "consensus reached trees", "star stabilizes throughput", "leaders star networks", "trees consensus reached", "kauri message dissemination", "prevent consensus reached", "leader nodes ifrst"], "#a74118": ["dissemination aggregation trees", "consensus kauri throughput", "resilience finality consensus", "provided dissemination aggregation", "permissioned blockchains sufer", "bd project cosmos", "outperforms hotstuf throughput", "bandwidth constrained scenarios", "finality consensus kauri", "fct project uidb"]}
