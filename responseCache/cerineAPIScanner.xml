<?xml version="1.0" encoding="UTF-8"?>
<article xmlns:xlink="http://www.w3.org/1999/xlink">
  <front>
    <journal-meta />
    <article-meta>
      <title-group>
        <article-title>APIScanner - Towards Automated Detection of Deprecated APIs in Python Libraries</article-title>
      </title-group>
      <contrib-group>
        <aff id="aff0">
          <label>0</label>
          <institution>Aparna Vadlamani, Rishitha Kalicheti, Sridhar Chimalakonda Research in Intelligent Software &amp; Human Analytics (RISHA) Lab Dept. of Computer Science &amp; Engineering Indian Institute of Technology Tirupati Tirupati</institution>
          ,
          <country country="IN">India</country>
        </aff>
      </contrib-group>
      <abstract>
        <p>-Python libraries are widely used for machine learn20 itanhrgee asdanemdpersecwcieaantyetidfiacsdciunoemotptohuetfrienalgatuntargesukaesgntehosad.naTcyh.eemAsePenIdstesipnarPnecdyatthbeoudngAlifiPbxIresasrairienes y discouraged from being used in further software development. a Manually detecting and replacing deprecated APIs is a tedious and time-consuming task due to the large number of API calls Mused in the projects. Moreover, the lack of proper documentation 0 for these deprecated APIs makes the task challenging. To address 1 this challenge, we propose an algorithm and a tool APIScanner that automatically detects deprecated APIs in Python libraries. ] This algorithm parses the source code of the libraries using Eabstract syntax tree (ASTs) and identifies the deprecated APIs S via decorator, hard-coded warning or comments. APIScanner is</p>
      </abstract>
      <kwd-group>
        <kwd />
        <kwd>sc adeVveilsoupaelrSotundtihoeCuosdeeoEfxdteepnrseiocnatetdhaAtPhIigehlleimghetnstsanwdhiwlearwnrsititnhge</kwd>
      </kwd-group>
    </article-meta>
  </front>
  <body>
    <sec id="sec-1">
      <title>-</title>
      <p>
        [ the source code. The tool can help developers to avoid using
deprecated API elements without the execution of code. We tested
4 our algorithm and tool on six popular Python libraries, which
dev tected 838 of 871 deprecated API elements. Demo of APIScanner:
1 https://youtu.be/1hy ugf-iek. Documentation, tool, and source
5 code can be found here: https://rishitha957.github.io/APIScanner.
2
9 Index Terms?Deprecated APIs, Python Libraries, API
Evolu.0 tion, Visual Studio Code Extension
02 I. INTRODUCTION
1 Python is one of the popular dynamic programming
lan:2 guage that has gained immense popularity due to its extensive
v collection of libraries, including popular modules for machine
i learning and scientific computing 1. Due to reasons such
rXas feature improvements and bug repairs, python libraries
a are frequently updated. Most API changes include moving
methods or fields around and renaming or changing method
signatures [
        <xref ref-type="bibr" rid="ref1">1</xref>
        ]. These changes may induce compatibility
issues in client projects [
        <xref ref-type="bibr" rid="ref2">2</xref>
        ]. It is recommended to follow the
deprecate-replace-remove cycle to enable developers to adapt
to these changes smoothly[
        <xref ref-type="bibr" rid="ref3">3</xref>
        ]. In this process, APIs that are no
longer supported are first labeled as deprecated, and then the
deprecated APIs are replaced with their substitution messages
to help developers transition from deprecated APIs to new
ones [
        <xref ref-type="bibr" rid="ref4">4</xref>
        ]. The deprecated APIs are gradually removed from
the library in future releases. Unfortunately, this process is
not always followed, as discovered by several studies [
        <xref ref-type="bibr" rid="ref5">5</xref>
        ], [
        <xref ref-type="bibr" rid="ref6">6</xref>
        ],
      </p>
    </sec>
    <sec id="sec-2">
      <title>1https://www.tiobe.com/tiobe-index/</title>
      <p>
        making it difficult for both library maintainers and developers.
Ko et al. have analyzed the quality of documentation for
resolving deprecated APIs [
        <xref ref-type="bibr" rid="ref7">7</xref>
        ]. Researchers have proposed
techniques to automatically update deprecated APIs [
        <xref ref-type="bibr" rid="ref8">8</xref>
        ], [
        <xref ref-type="bibr" rid="ref9">9</xref>
        ].
However, most of them are for static programming languages
such as Java, C# and Android SDKs. Python being a typical
dynamic programming language, exhibits different API
evolution patterns compared to Java [
        <xref ref-type="bibr" rid="ref2">2</xref>
        ]. Hence it motivates the
need for new techniques and tools to detect deprecated APIs.
      </p>
      <p>
        Deprecated APIs in Python libraries are mainly declared by
decorator, hard-coded warning, and comments [
        <xref ref-type="bibr" rid="ref10">10</xref>
        ].
Nevertheless, it was discovered that library maintainers use varied
and multiple strategies for API deprecation, leading to
inconsistency in the implementation of libraries as well as their
automated detection [
        <xref ref-type="bibr" rid="ref10">10</xref>
        ]. In addition, nearly one-third of the
deprecated APIs in Python is not included in the official library
documentation, making it hard for developers using libraries
to limit the use of deprecated APIs [
        <xref ref-type="bibr" rid="ref10">10</xref>
        ].
      </p>
      <p>
        To avoid the usage of deprecated APIs during new software
development, developers should be aware of deprecating APIs
in the project, motivating the need for this research. Hence,
given the rise in popularity of Python and the number of
deprecated APIs used in Python projects, we propose a novel
algorithm that uses the source code of the Python libraries
to get a list of deprecated APIs. This list is further used
to detect deprecated APIs in Python projects. This paper
contributes (i) an algorithm for deprecated API detection
and (ii) a Visual Studio Code extension, APIScanner2. We
believe that APIScanner might assist developers to detect
deprecated APIs and help them avoid searching through API
documentation or on forums such as Stack Overflow. As a
preliminary evaluation, we tested our algorithm and tool on
six popular Python libraries [
        <xref ref-type="bibr" rid="ref11">11</xref>
        ] that are commonly used in
data analytics, machine learning, and scientific computing.
The initial results are promising with 90% API deprecation
detection, with potential for application beyond these libraries.
      </p>
    </sec>
    <sec id="sec-3">
      <title>II. APPROACH</title>
      <p>
        Wang et al. [
        <xref ref-type="bibr" rid="ref10">10</xref>
        ] investigated that inconsistency in the
adopted deprecation strategies makes it a harder task to use
2https://marketplace.visualstudio.com/items?itemName=Rishitha.
apiscanner
Fig. 1. Approach for Detecting Deprecated API Elements in Python Libraries
automated approaches for managing deprecated APIs and their
documentation. In this paper, we propose an approach (as
shown in Fig. 1) to automatically detect deprecated APIs in
Python libraries and alert developers during API usage in
software development. Firstly, we identify the libraries used in
the client code from import statements. We build an abstract
syntax tree (AST) to parse the source code to detect the
patterns. The proposed Algorithm 1 is then applied on the
ASTs to retrieve a list of deprecated APIs in those libraries.
Based on this list, APIScanner parses each line of code in
the editor, highlights the deprecated elements in the editor.
On hovering, the tool also displays a message informing the
developer that some element(s) of this API call has been
deprecated (as shown in Fig. 2). We developed APIScanner
as a Visual Studio Code extension as it supports both Python
scripts and jupyter notebooks3.
(a) Using Decorator: in Matplotlib
@_api.deprecated("3.3", alternative="Glue(?fil?)")
class Fil(Glue):
def __init__(self):
      </p>
      <p>super().__init__(?fil?)
(b) Using Comments: in Sklearn
class GradientBoostingClassifier(args):
"""
..criterion : {?friedman_mse?, ?mse?, ?mae?}..
.. deprecated:: 0.24 ?criterion=?mae?? is deprecated and will be removed in
version 0.26. Use ?criterion=?friedman_mse?? or ??mse?? instead, as trees
should use a least-square criterion in Gradient Boosting
"""
(c) Using Hardcoded Warnings: in Pandas
class Series(args):
def __init__(self,args):
if dtype is None:</p>
      <p>warnings.warn("The default dtype for empty Series will be ?object?
instead of ?float64? in a future version",DeprecationWarning,stacklevel=2)
Listing 1. Examples of methods of deprecation strategies adopted in Python
libraries which are deprecated through a) decorator, b) comments c)
hardcoded warning
A. Detecting Deprecated API Elements through Source Code</p>
      <p>We parse the source code of the library to generate an AST
and denote it as PAST . Examples of Python APIs deprecated
by decorator, hard-coded warnings, and comments are shown
in listing 1. Structure of AST helps to realize the relationship
between class declaration and function definition with
decorator, hard-coded warnings, and comments. We traverse through
each node NAST in the AST and generate PAST using
DepthFirst Search (cf. Line-2). Whenever we encounter a class
definition node, we extract the doc-string of that particular
class. If the doc-string contains the deprecate keyword (such
as (b) in Listing 1), we generate the Fully Qualified API name
of the class by appending the class name to the directory path.
We also append the deprecation message to LD (cf. Line-13)
along with a list of decorators associated with the class. If
there is a deprecated decorator (such as (a) in Listing 1) in the
extracted list, we add the fully qualified name of the class and
any description provided to list LD (cf. Line-16). Similarly,
when we encounter the function definition node, we extract the
list of decorators associated with it. If there is a deprecated
decorator in the extracted list, we add a fully qualified name
of the function to list LD (cf. Line-6). For each function call
node in NAST (cf. Line-7), we verify if DeprecationWarning
or FutureWarning are passed as arguments (such as (c) in
Listing 1) and add its fully qualified name to list LD, which
is the final generated list of deprecated API elements.</p>
    </sec>
    <sec id="sec-4">
      <title>III. EVALUATION</title>
      <p>A. Libraries Selection</p>
      <p>
        To evaluate our approach, we applied it on six popular
thirdparty Python libraries that were identified by Pimentel et al
[
        <xref ref-type="bibr" rid="ref11">11</xref>
        ]. However, this approach is not limited to the selected
libraries and could be applied to other Python libraries as well.
      </p>
      <p>
        NumPy: Array programming library [
        <xref ref-type="bibr" rid="ref12">12</xref>
        ].
      </p>
      <p>
        Matplotlib: A 2D graphics environment [
        <xref ref-type="bibr" rid="ref13">13</xref>
        ].
      </p>
      <p>
        Pandas: Data analysis and manipulation tool [
        <xref ref-type="bibr" rid="ref14">14</xref>
        ].
Scikit-learn: Machine learning library for Python [
        <xref ref-type="bibr" rid="ref15">15</xref>
        ].
Scipy: Library for scientific and technical computing [
        <xref ref-type="bibr" rid="ref16">16</xref>
        ].
Seaborn: Data visualization based on matplotlib [
        <xref ref-type="bibr" rid="ref17">17</xref>
        ].
Algorithm 1: Detecting Deprecated API Elements in
Python Libraries
Input: P , Python Library Code
      </p>
      <p>Output: LD, List of Deprecated API Elements
1 Function Detect_Deprecated_API():
2 LD fg
/* parseCode returns Abstract syntax tree of
given code input */
3 PAST parseCode(P )</p>
      <p>/* Traverse each node in PAST using BFS */
4 for NAST 2 PAST do
5 if isFunctionDefNode(NAST ) then
6 D = NAST :Decorators
7 if isDeprecatedDecorator(D) then
8 LD.add(getFullyQualifiedName(NAST :Name))
/* Traverse each Node in NAST */
9 for Node 2 NAST do
10 if isFunctionCallNode(Node) and</p>
      <p>isDeprecationWarning(Node) then
11 LD.add(getFullyQualifiedName(NAST :Name))</p>
      <p>Table I summarizes the total number of deprecated API
elements detected by the Algorithm 1 and the total number
of deprecated API elements found in the source code of
the Python libraries. We manually counted the number of
deprecated API elements present in the source code of the
libraries. From Table I, we can observe that the algorithm has
detected more than 90% of the deprecated APIs. In the case of
Matplotlib, only 65% of the deprecated APIs could be detected
since Matplotlib deprecates many of its parameters using a
custom warning function which does not have any parameters
indicating if it is a DeprecationWarning or not. In such cases,
the proposed algorithm could not detect the deprecated API
elements.</p>
      <p>In the case of Scikit-learn, Numpy and Pandas, some of the
functions that are used to deprecate parameters or parameter
values or deprecation warnings induced by other libraries are
also captured. Hence, the number of deprecated API elements
detected by the algorithm is higher than the actual number of
deprecated APIs. Whereas in the case of Scipy and Seaborn,
some of the parameters are deprecated without using any of the
three deprecation strategies, which could not be detected by
the algorithm. Hence, the number of deprecated API elements
detected by the algorithm for Scipy and Seaborn are lower
than the actual number of deprecated APIs.</p>
    </sec>
    <sec id="sec-5">
      <title>IV. LIMITATIONS AND THREATS TO VALIDITY APIScanner detects deprecated APIs through decorator, warning or comments. Any other deprecated APIs that are not implemented through the above three strategies cannot</title>
      <p>Scikit-learn
Matplotlib
Numpy
Pandas
Scipy
Seaborn
388.1k
982.5k
145.6k
668.9k
725.62k
83.7k</p>
      <p>TABLE I</p>
      <p>EVALUATION OF RESULTS OBTAINED USING OUR ALGORITHM
be detected by the algorithm. Moreover, the algorithm finds
the function or class in which a parameter is deprecated but
the exact parameter deprecated may not be mentioned in
the deprecation message displayed by the extension due to
the inconsistent deprecation strategies adopted by the library
maintainers. APIs deprecated without using the
DeprecationWarning and FutureWarning as parameters in the warning
function cannot be detected by the algorithm. APIs deprecated
using single-line comments and not using the doc-strings also
cannot be detected by the algorithm. Further, a major
prerequisite for our approach is the availability of source code
of libraries. We can mitigate the threat due to inconsistent
deprecation strategies if we can ensure that the documentation
is structured and well maintained for Python libraries.</p>
      <p>Finally, since the results are evaluated manually, there may
be human errors. Hence, we have carefully reviewed and
validated some of the results using release notes to mitigate
this potential threat. We plan to extend the evaluation of the
tool using release notes and API documentation.</p>
    </sec>
    <sec id="sec-6">
      <title>V. RELATED WORK</title>
      <p>In the literature, several studies on deprecated APIs for
different environments have been done to analyze and tackle
the challenges posed by the deprecation of APIs in libraries.</p>
      <p>
        Robbes et al. [
        <xref ref-type="bibr" rid="ref5">5</xref>
        ], [
        <xref ref-type="bibr" rid="ref6">6</xref>
        ] studied the reactions of developers
to the deprecation and the impact of API deprecation on the
Smalltalk and Pharo ecosystem. Ko et al. [
        <xref ref-type="bibr" rid="ref7">7</xref>
        ] examined 260
deprecated APIs from eight Java libraries and their
documentation and observed that 61% of deprecated APIs are offered
with replacements. Similarly, Brito et al. [
        <xref ref-type="bibr" rid="ref18">18</xref>
        ] conducted a
large-scale study on 661 real-world Java systems and found
that replacements are provided for 64% of the deprecated
APIs. In another study [
        <xref ref-type="bibr" rid="ref4">4</xref>
        ] conducted on Java and C# projects,
they have observed that an average of 66.7% of APIs in
Java projects and 77.8% in C# projects were deprecated
with replacement messages. In 26 open-source Java systems
over 690 versions, Zhou et al. [
        <xref ref-type="bibr" rid="ref19">19</xref>
        ] analysed the history of
deprecated APIs and observed that deprecated API messages
are not well managed by library contributors with very few
deprecated APIs being listed with replacements. Li et al. [
        <xref ref-type="bibr" rid="ref3">3</xref>
        ]
characterized the deprecated APIs in Android Apps parsing
the code of 10000 Android applications. Zhang et al. [
        <xref ref-type="bibr" rid="ref2">2</xref>
        ]
have observed a significant difference in evolution patterns
of Python and Java APIs and also identified 14 patterns in
which Python APIs evolve. Wang et al. [
        <xref ref-type="bibr" rid="ref10">10</xref>
        ] observed that
library contributors do not properly handle API deprecation in
Python libraries. To this end, there is a need for approaches
and tools to automatically detect deprecated API elements in
Python projects.
      </p>
      <p>
        Several approaches have been proposed in the literature for
other ecosystems to migrate from deprecated APIs [
        <xref ref-type="bibr" rid="ref20">20</xref>
        ], [
        <xref ref-type="bibr" rid="ref9">9</xref>
        ],
[
        <xref ref-type="bibr" rid="ref8">8</xref>
        ]. Yaoguo Xi et al. [
        <xref ref-type="bibr" rid="ref20">20</xref>
        ] proposed an approach and built a
tool DAAMT to migrate from deprecated APIs in Java to their
replacements if recorded in the documentation. Fazzini et al.
[
        <xref ref-type="bibr" rid="ref9">9</xref>
        ] developed a technique AppEvolve to update API changes in
Android Apps by automatically learning from examples before
and after-updates. Haryono et al. [
        <xref ref-type="bibr" rid="ref8">8</xref>
        ] proposed an approach
named CocciEvolve that updates using only a single
afterupdate example. However, tools that handle deprecated APIs
in Python projects have not been developed, which motivated
us towards the development of APIScanner.
      </p>
    </sec>
    <sec id="sec-7">
      <title>VI. CONCLUSION AND FUTURE WORK</title>
      <p>Considering the extensive use of deprecated APIs during
software development and lack of proper documentation for
deprecated APIs, we proposed an approach to automatically
detect deprecated APIs in Python libraries during the
development phase of the project. In this paper, we presented a
novel algorithm and a tool called APIScanner that detects
deprecated APIs. The algorithm identifies the APIs deprecated
via decorator, hard-coded warning or comments by parsing the
source code of the libraries and generated a list of deprecated
APIs. APIScanner used this list and searched for the use of
deprecated APIs in the current active editor. The tool
highlights deprecated APIs in the source code along with further
deprecation details. APIScanner thus aims to help developers
detect deprecated APIs during the development stage and avoid
searching through API documentation or forums such as Stack
Overflow. Highlighting the use of deprecated APIs in the
editor might help developers to address and replace them. The
proposed algorithm identified 838 out of 871 API elements
across six different Python libraries.</p>
      <p>As future work, our goal is to strengthen the tool with
release-specific information and develop a better user interface
(such as different colors) to indicate the severity of the
deprecation. We also plan to improve the documentation of
deprecated APIs through the information obtained from the
algorithm. We plan to extend the tool to provide a feature
to migrate from the deprecated API to its replacement. We
aim to improve the tool?s accuracy by extracting APIs that are
deprecated using the custom deprecation strategies. Finally, we
plan to conduct extensive developer studies on the usage of
the approach and the tool with more libraries.</p>
    </sec>
  </body>
  <back>
    <ref-list>
      <ref id="ref1">
        <mixed-citation>
          [1]
          <string-name>
            <given-names>D.</given-names>
            <surname>Dig</surname>
          </string-name>
          and
          <string-name>
            <given-names>R.</given-names>
            <surname>Johnson</surname>
          </string-name>
          , ?
          <article-title>The role of refactorings in api evolution,?</article-title>
          <source>in 21st IEEE International Conference on Software Maintenance (ICSM'05)</source>
          ,
          <year>2005</year>
          , pp.
          <fpage>389</fpage>
          -
          <lpage>398</lpage>
          .
        </mixed-citation>
      </ref>
      <ref id="ref2">
        <mixed-citation>
          [2]
          <string-name>
            <given-names>Z.</given-names>
            <surname>Zhang</surname>
          </string-name>
          , H. Zhu,
          <string-name>
            <given-names>M.</given-names>
            <surname>Wen</surname>
          </string-name>
          ,
          <string-name>
            <given-names>Y.</given-names>
            <surname>Tao</surname>
          </string-name>
          ,
          <string-name>
            <given-names>Y.</given-names>
            <surname>Liu</surname>
          </string-name>
          , and
          <string-name>
            <given-names>Y.</given-names>
            <surname>Xiong</surname>
          </string-name>
          , ?
          <article-title>How do python framework apis evolve? an exploratory study</article-title>
          ,
          <source>? in 2020 IEEE 27th International Conference on Software Analysis, Evolution and Reengineering</source>
          (SANER). IEEE,
          <year>2020</year>
          , pp.
          <fpage>81</fpage>
          -
          <lpage>92</lpage>
          .
        </mixed-citation>
      </ref>
      <ref id="ref3">
        <mixed-citation>
          [3]
          <string-name>
            <given-names>L.</given-names>
            <surname>Li</surname>
          </string-name>
          ,
          <string-name>
            <given-names>J.</given-names>
            <surname>Gao</surname>
          </string-name>
          ,
          <string-name>
            <given-names>T. F.</given-names>
            <surname>Bissyande´</surname>
          </string-name>
          ,
          <string-name>
            <given-names>L.</given-names>
            <surname>Ma</surname>
          </string-name>
          ,
          <string-name>
            <given-names>X.</given-names>
            <surname>Xia</surname>
          </string-name>
          , and
          <string-name>
            <given-names>J.</given-names>
            <surname>Klein</surname>
          </string-name>
          , ?
          <article-title>Characterising deprecated android apis</article-title>
          ,?
          <source>in Proceedings of the 15th International Conference on Mining Software Repositories, ser. MSR '18</source>
          . New York, NY, USA: Association for Computing Machinery,
          <year>2018</year>
          , p.
          <fpage>254</fpage>
          -
          <lpage>264</lpage>
          .
        </mixed-citation>
      </ref>
      <ref id="ref4">
        <mixed-citation>
          [4]
          <string-name>
            <given-names>G.</given-names>
            <surname>Brito</surname>
          </string-name>
          ,
          <string-name>
            <given-names>A.</given-names>
            <surname>Hora</surname>
          </string-name>
          ,
          <string-name>
            <given-names>M. T.</given-names>
            <surname>Valente</surname>
          </string-name>
          , and
          <string-name>
            <given-names>R.</given-names>
            <surname>Robbes</surname>
          </string-name>
          , ?
          <article-title>On the use of replacement messages in api deprecation: An empirical study</article-title>
          ,
          <source>? Journal of Systems and Software</source>
          , vol.
          <volume>137</volume>
          , pp.
          <fpage>306</fpage>
          -
          <lpage>321</lpage>
          ,
          <year>2018</year>
          .
        </mixed-citation>
      </ref>
      <ref id="ref5">
        <mixed-citation>
          [5]
          <string-name>
            <given-names>R.</given-names>
            <surname>Robbes</surname>
          </string-name>
          ,
          <string-name>
            <given-names>M.</given-names>
            <surname>Lungu</surname>
          </string-name>
          , and D. Ro¨thlisberger, ?
          <article-title>How do developers react to api deprecation? the case of a smalltalk ecosystem,? in Proceedings of the ACM SIGSOFT 20th International Symposium on the Foundations of Software Engineering, ser</article-title>
          .
          <source>FSE '12</source>
          . New York, NY, USA: Association for Computing Machinery,
          <year>2012</year>
          .
        </mixed-citation>
      </ref>
      <ref id="ref6">
        <mixed-citation>
          [6]
          <string-name>
            <given-names>A.</given-names>
            <surname>Hora</surname>
          </string-name>
          ,
          <string-name>
            <given-names>R.</given-names>
            <surname>Robbes</surname>
          </string-name>
          ,
          <string-name>
            <given-names>N.</given-names>
            <surname>Anquetil</surname>
          </string-name>
          ,
          <string-name>
            <given-names>A.</given-names>
            <surname>Etien</surname>
          </string-name>
          ,
          <string-name>
            <given-names>S.</given-names>
            <surname>Ducasse</surname>
          </string-name>
          , and M. T. Valente, ?
          <article-title>How do developers react to api evolution? the pharo ecosystem case,? in Proceedings of the 2015 IEEE International Conference on Software Maintenance and Evolution (ICSME), ser</article-title>
          .
          <source>ICSME '15. USA: IEEE Computer Society</source>
          ,
          <year>2015</year>
          , p.
          <fpage>251</fpage>
          -
          <lpage>260</lpage>
          .
        </mixed-citation>
      </ref>
      <ref id="ref7">
        <mixed-citation>
          [7]
          <string-name>
            <given-names>D.</given-names>
            <surname>Ko</surname>
          </string-name>
          ,
          <string-name>
            <given-names>K.</given-names>
            <surname>Ma</surname>
          </string-name>
          , S. Park,
          <string-name>
            <given-names>S.</given-names>
            <surname>Kim</surname>
          </string-name>
          ,
          <string-name>
            <given-names>D.</given-names>
            <surname>Kim</surname>
          </string-name>
          , and
          <string-name>
            <given-names>Y. L.</given-names>
            <surname>Traon</surname>
          </string-name>
          , ?
          <article-title>Api document quality for resolving deprecated apis</article-title>
          ,?
          <source>in Proceedings of the 2014 21st Asia-Pacific Software Engineering</source>
          Conference - Volume
          <volume>02</volume>
          ,
          <article-title>ser</article-title>
          .
          <source>APSEC '14. USA: IEEE Computer Society</source>
          ,
          <year>2014</year>
          , p.
          <fpage>27</fpage>
          -
          <lpage>30</lpage>
          .
        </mixed-citation>
      </ref>
      <ref id="ref8">
        <mixed-citation>
          [8]
          <string-name>
            <given-names>S. A.</given-names>
            <surname>Haryono</surname>
          </string-name>
          ,
          <string-name>
            <given-names>F.</given-names>
            <surname>Thung</surname>
          </string-name>
          ,
          <string-name>
            <given-names>H. J.</given-names>
            <surname>Kang</surname>
          </string-name>
          ,
          <string-name>
            <given-names>L.</given-names>
            <surname>Serrano</surname>
          </string-name>
          , G. Muller,
          <string-name>
            <given-names>J.</given-names>
            <surname>Lawall</surname>
          </string-name>
          ,
          <string-name>
            <given-names>D.</given-names>
            <surname>Lo</surname>
          </string-name>
          , and L. Jiang, ?
          <article-title>Automatic android deprecated-api usage update by learning from single updated example</article-title>
          ,?
          <year>2020</year>
          .
        </mixed-citation>
      </ref>
      <ref id="ref9">
        <mixed-citation>
          [9]
          <string-name>
            <given-names>M.</given-names>
            <surname>Fazzini</surname>
          </string-name>
          ,
          <string-name>
            <given-names>Q.</given-names>
            <surname>Xin</surname>
          </string-name>
          ,
          <article-title>and</article-title>
          <string-name>
            <given-names>A.</given-names>
            <surname>Orso</surname>
          </string-name>
          , ?
          <source>Automated api-usage update for android apps,? in Proceedings of the 28th ACM SIGSOFT International Symposium on Software Testing and Analysis</source>
          ,
          <string-name>
            <surname>ser. ISSTA</surname>
          </string-name>
          <year>2019</year>
          . New York, NY, USA: Association for Computing Machinery,
          <year>2019</year>
          , p.
          <fpage>204</fpage>
          -
          <lpage>215</lpage>
          .
        </mixed-citation>
      </ref>
      <ref id="ref10">
        <mixed-citation>
          [10]
          <string-name>
            <given-names>J.</given-names>
            <surname>Wang</surname>
          </string-name>
          ,
          <string-name>
            <given-names>L.</given-names>
            <surname>Li</surname>
          </string-name>
          ,
          <string-name>
            <given-names>K.</given-names>
            <surname>Liu</surname>
          </string-name>
          , and
          <string-name>
            <given-names>H.</given-names>
            <surname>Cai</surname>
          </string-name>
          , ?
          <article-title>Exploring how deprecated python library apis are (not) handled</article-title>
          ,?
          <source>in Proceedings of the 28th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering</source>
          ,
          <year>2020</year>
          , pp.
          <fpage>233</fpage>
          -
          <lpage>244</lpage>
          .
        </mixed-citation>
      </ref>
      <ref id="ref11">
        <mixed-citation>
          [11]
          <string-name>
            <given-names>J. a. F.</given-names>
            <surname>Pimentel</surname>
          </string-name>
          ,
          <string-name>
            <given-names>L.</given-names>
            <surname>Murta</surname>
          </string-name>
          ,
          <string-name>
            <given-names>V.</given-names>
            <surname>Braganholo</surname>
          </string-name>
          , and
          <string-name>
            <given-names>J.</given-names>
            <surname>Freire</surname>
          </string-name>
          , ?
          <article-title>A largescale study about quality and reproducibility of jupyter notebooks</article-title>
          ,?
          <source>in Proceedings of the 16th International Conference on Mining Software Repositories, ser. MSR '19</source>
          . IEEE Press,
          <year>2019</year>
          , p.
          <fpage>507</fpage>
          -
          <lpage>517</lpage>
          .
        </mixed-citation>
      </ref>
      <ref id="ref12">
        <mixed-citation>
          [12]
          <string-name>
            <given-names>C. R.</given-names>
            <surname>Harris</surname>
          </string-name>
          ,
          <string-name>
            <given-names>K. J.</given-names>
            <surname>Millman</surname>
          </string-name>
          ,
          <string-name>
            <surname>S. J. van der Walt</surname>
          </string-name>
          , R. Gommers,
          <string-name>
            <given-names>P.</given-names>
            <surname>Virtanen</surname>
          </string-name>
          ,
          <string-name>
            <given-names>D.</given-names>
            <surname>Cournapeau</surname>
          </string-name>
          ,
          <string-name>
            <given-names>E.</given-names>
            <surname>Wieser</surname>
          </string-name>
          ,
          <string-name>
            <given-names>J.</given-names>
            <surname>Taylor</surname>
          </string-name>
          , S. Berg,
          <string-name>
            <given-names>N. J.</given-names>
            <surname>Smith</surname>
          </string-name>
          ,
          <string-name>
            <given-names>R.</given-names>
            <surname>Kern</surname>
          </string-name>
          ,
          <string-name>
            <given-names>M.</given-names>
            <surname>Picus</surname>
          </string-name>
          ,
          <string-name>
            <given-names>S.</given-names>
            <surname>Hoyer</surname>
          </string-name>
          ,
          <string-name>
            <surname>M. H. van Kerkwijk</surname>
            ,
            <given-names>M.</given-names>
          </string-name>
          <string-name>
            <surname>Brett</surname>
            ,
            <given-names>A.</given-names>
          </string-name>
          <string-name>
            <surname>Haldane</surname>
          </string-name>
          ,
          <string-name>
            <surname>J. F. del R'?o</surname>
            , M. Wiebe,
            <given-names>P.</given-names>
          </string-name>
          <string-name>
            <surname>Peterson</surname>
            ,
            <given-names>P.</given-names>
          </string-name>
          <article-title>G'erard-</article-title>
          <string-name>
            <surname>Marchant</surname>
            ,
            <given-names>K.</given-names>
          </string-name>
          <string-name>
            <surname>Sheppard</surname>
            ,
            <given-names>T.</given-names>
          </string-name>
          <string-name>
            <surname>Reddy</surname>
            ,
            <given-names>W.</given-names>
          </string-name>
          <string-name>
            <surname>Weckesser</surname>
            ,
            <given-names>H.</given-names>
          </string-name>
          <string-name>
            <surname>Abbasi</surname>
            ,
            <given-names>C.</given-names>
          </string-name>
          <string-name>
            <surname>Gohlke</surname>
          </string-name>
          , and T. E. Oliphant, ?
          <article-title>Array programming with NumPy,?</article-title>
          <source>Nature</source>
          , vol.
          <volume>585</volume>
          , no.
          <issue>7825</issue>
          , pp.
          <fpage>357</fpage>
          -
          <lpage>362</lpage>
          , Sep.
          <year>2020</year>
          .
        </mixed-citation>
      </ref>
      <ref id="ref13">
        <mixed-citation>
          [13]
          <string-name>
            <given-names>J. D.</given-names>
            <surname>Hunter</surname>
          </string-name>
          , ?
          <article-title>Matplotlib: A 2d graphics environment</article-title>
          ,
          <source>? Computing in Science &amp; Engineering</source>
          , vol.
          <volume>9</volume>
          , no.
          <issue>3</issue>
          , pp.
          <fpage>90</fpage>
          -
          <lpage>95</lpage>
          ,
          <year>2007</year>
          .
        </mixed-citation>
      </ref>
      <ref id="ref14">
        <mixed-citation>
          [14]
          <string-name>
            <given-names>W.</given-names>
            <surname>McKinney</surname>
          </string-name>
          , ?
          <article-title>Data structures for statistical computing in python</article-title>
          ,?
          <source>in Proceedings of the 9th Python in Science Conference, S. van der Walt and J</source>
          . Millman, Eds.,
          <year>2010</year>
          , pp.
          <fpage>51</fpage>
          -
          <lpage>56</lpage>
          .
        </mixed-citation>
      </ref>
      <ref id="ref15">
        <mixed-citation>
          [15]
          <string-name>
            <given-names>F.</given-names>
            <surname>Pedregosa</surname>
          </string-name>
          ,
          <string-name>
            <given-names>G.</given-names>
            <surname>Varoquaux</surname>
          </string-name>
          ,
          <string-name>
            <given-names>A.</given-names>
            <surname>Gramfort</surname>
          </string-name>
          ,
          <string-name>
            <given-names>V.</given-names>
            <surname>Michel</surname>
          </string-name>
          ,
          <string-name>
            <given-names>B.</given-names>
            <surname>Thirion</surname>
          </string-name>
          ,
          <string-name>
            <given-names>O.</given-names>
            <surname>Grisel</surname>
          </string-name>
          ,
          <string-name>
            <given-names>M.</given-names>
            <surname>Blondel</surname>
          </string-name>
          ,
          <string-name>
            <given-names>P.</given-names>
            <surname>Prettenhofer</surname>
          </string-name>
          ,
          <string-name>
            <given-names>R.</given-names>
            <surname>Weiss</surname>
          </string-name>
          ,
          <string-name>
            <given-names>V.</given-names>
            <surname>Dubourg</surname>
          </string-name>
          ,
          <string-name>
            <given-names>J.</given-names>
            <surname>Vanderplas</surname>
          </string-name>
          ,
          <string-name>
            <given-names>A.</given-names>
            <surname>Passos</surname>
          </string-name>
          ,
          <string-name>
            <given-names>D.</given-names>
            <surname>Cournapeau</surname>
          </string-name>
          ,
          <string-name>
            <given-names>M.</given-names>
            <surname>Brucher</surname>
          </string-name>
          ,
          <string-name>
            <given-names>M.</given-names>
            <surname>Perrot</surname>
          </string-name>
          , and E. Duchesnay, ?
          <article-title>Scikit-learn: Machine learning in Python,?</article-title>
          <source>Journal of Machine Learning Research</source>
          , vol.
          <volume>12</volume>
          , pp.
          <fpage>2825</fpage>
          -
          <lpage>2830</lpage>
          ,
          <year>2011</year>
          .
        </mixed-citation>
      </ref>
      <ref id="ref16">
        <mixed-citation>
          [16]
          <string-name>
            <given-names>P.</given-names>
            <surname>Virtanen</surname>
          </string-name>
          ,
          <string-name>
            <given-names>R.</given-names>
            <surname>Gommers</surname>
          </string-name>
          ,
          <string-name>
            <given-names>T. E.</given-names>
            <surname>Oliphant</surname>
          </string-name>
          ,
          <string-name>
            <given-names>M.</given-names>
            <surname>Haberland</surname>
          </string-name>
          ,
          <string-name>
            <given-names>T.</given-names>
            <surname>Reddy</surname>
          </string-name>
          ,
          <string-name>
            <given-names>D.</given-names>
            <surname>Cournapeau</surname>
          </string-name>
          , E. Burovski,
          <string-name>
            <given-names>P.</given-names>
            <surname>Peterson</surname>
          </string-name>
          ,
          <string-name>
            <given-names>W.</given-names>
            <surname>Weckesser</surname>
          </string-name>
          ,
          <string-name>
            <given-names>J.</given-names>
            <surname>Bright</surname>
          </string-name>
          et al.,
          <source>?Scipy 1</source>
          .
          <article-title>0: fundamental algorithms for scientific computing in python,? Nature methods</article-title>
          , vol.
          <volume>17</volume>
          , no.
          <issue>3</issue>
          , pp.
          <fpage>261</fpage>
          -
          <lpage>272</lpage>
          ,
          <year>2020</year>
          .
        </mixed-citation>
      </ref>
      <ref id="ref17">
        <mixed-citation>
          [17]
          <string-name>
            <surname>M.</surname>
          </string-name>
          <article-title>Waskom and the seaborn development team</article-title>
          , ?mwaskom/seaborn,? Sep.
          <year>2020</year>
          .
        </mixed-citation>
      </ref>
      <ref id="ref18">
        <mixed-citation>
          [18]
          <string-name>
            <given-names>G.</given-names>
            <surname>Brito</surname>
          </string-name>
          ,
          <string-name>
            <given-names>A.</given-names>
            <surname>Hora</surname>
          </string-name>
          ,
          <string-name>
            <given-names>M. T.</given-names>
            <surname>Valente</surname>
          </string-name>
          , and
          <string-name>
            <given-names>R.</given-names>
            <surname>Robbes</surname>
          </string-name>
          , ?
          <article-title>Do developers deprecate apis with replacement messages? a large-scale analysis on java systems</article-title>
          ,? in
          <source>2016 IEEE 23rd International Conference on Software Analysis, Evolution, and Reengineering (SANER)</source>
          , vol.
          <volume>1</volume>
          ,
          <issue>2016</issue>
          , pp.
          <fpage>360</fpage>
          -
          <lpage>369</lpage>
          .
        </mixed-citation>
      </ref>
      <ref id="ref19">
        <mixed-citation>
          [19]
          <string-name>
            <given-names>J.</given-names>
            <surname>Zhou</surname>
          </string-name>
          and
          <string-name>
            <given-names>R. J.</given-names>
            <surname>Walker</surname>
          </string-name>
          , ?
          <article-title>Api deprecation: A retrospective analysis and detection method for code examples on the web</article-title>
          ,?
          <source>in Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering</source>
          , ser.
          <source>FSE</source>
          <year>2016</year>
          . New York, NY, USA: Association for Computing Machinery,
          <year>2016</year>
          , p.
          <fpage>266</fpage>
          -
          <lpage>277</lpage>
          .
        </mixed-citation>
      </ref>
      <ref id="ref20">
        <mixed-citation>
          [20]
          <string-name>
            <given-names>Y.</given-names>
            <surname>Xi</surname>
          </string-name>
          ,
          <string-name>
            <given-names>L.</given-names>
            <surname>Shen</surname>
          </string-name>
          ,
          <string-name>
            <given-names>Y.</given-names>
            <surname>Gui</surname>
          </string-name>
          , and
          <string-name>
            <given-names>W.</given-names>
            <surname>Zhao</surname>
          </string-name>
          , ?
          <article-title>Migrating deprecated api to documented replacement: Patterns and tool</article-title>
          ,?
          <source>in Proceedings of the 11th Asia-Pacific Symposium on Internetware, ser. Internetware '19</source>
          . New York, NY, USA: Association for Computing Machinery,
          <year>2019</year>
          .
        </mixed-citation>
      </ref>
    </ref-list>
  </back>
</article>

